{"version":3,"sources":["../../src/pdu.js"],"names":["pduHeadParams","PDU","constructor","command","options","Buffer","isBuffer","fromBuffer","command_length","command_id","commands","id","command_status","sequence_number","params","Object","keys","forEach","key","default","type","tlvs","isResponse","response","option","errors","ESME_RINVCMDID","buffer","i","readUInt32BE","bind","offset","maxLength","Error","commandsById","read","size","tlvId","readUInt16BE","length","tlv","tlvsById","slice","tag","tlvMap","multiple","push","_filter","func","filter","call","value","_initBuffer","writeUInt32BE","toBuffer","values","write","writeUInt16BE","fromStream","stream","commandLength","unshift"],"mappings":";;;;;AACA;;AAEA,MAAMA,aAAa,GAAG,CACpB,gBADoB,EAEpB,YAFoB,EAGpB,gBAHoB,EAIpB,iBAJoB,CAAtB;;AAOA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAUC,OAAO,GAAG,EAApB,EAAwB;AACjC,QAAIC,MAAM,CAACC,QAAP,CAAgBH,OAAhB,CAAJ,EAA8B;AAC5B,aAAO,KAAKI,UAAL,CAAgBJ,OAAhB,CAAP;AACD;;AACD,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKK,cAAL,GAAsB,CAAtB;AACA,SAAKC,UAAL,GAAkBC,eAASP,OAAT,EAAkBQ,EAApC;AACA,SAAKC,cAAL,GAAsBR,OAAO,CAACQ,cAAR,IAA0B,CAAhD;AACA,SAAKC,eAAL,GAAuBT,OAAO,CAACS,eAAR,IAA2B,CAAlD;;AACA,QAAI,KAAKD,cAAT,EAAyB;AACvB;AACD;;AACD,UAAME,MAAM,GAAGJ,eAASP,OAAT,EAAkBW,MAAlB,IAA4B,EAA3C;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,GAAD,IAAS;AACnC,UAAIA,GAAG,IAAId,OAAX,EAAoB;AAClB,aAAKc,GAAL,IAAYd,OAAO,CAACc,GAAD,CAAnB;AACD,OAFD,MAEO,IAAI,aAAaJ,MAAM,CAACI,GAAD,CAAvB,EAA8B;AACnC,aAAKA,GAAL,IAAYJ,MAAM,CAACI,GAAD,CAAN,CAAYC,OAAxB;AACD,OAFM,MAEA;AACL,aAAKD,GAAL,IAAYJ,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBD,OAA7B;AACD;AACF,KARD;AAUAJ,IAAAA,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,OAArB,CAA8BC,GAAD,IAAS;AACpC,UAAIA,GAAG,IAAIG,UAAX,EAAiB;AACf,aAAKH,GAAL,IAAYd,OAAO,CAACc,GAAD,CAAnB;AACD;AACF,KAJD;AAKD;;AACDI,EAAAA,UAAU,GAAG;AACX,WAAO,CAAC,EAAE,KAAKb,UAAL,GAAkB,UAApB,CAAR;AACD;;AACDc,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACf,UAAMpB,OAAO,GAAGoB,MAAM,IAAI,EAA1B;AACApB,IAAAA,OAAO,CAACS,eAAR,GAA0B,KAAKA,eAA/B;;AACA,QAAI,KAAKV,OAAL,KAAiB,SAArB,EAAgC;AAC9B,UAAI,EAAE,oBAAoBC,OAAtB,CAAJ,EAAoC;AAClCA,QAAAA,OAAO,CAACQ,cAAR,GAAyBa,aAAOC,cAAhC;AACD;;AACD,aAAO,IAAIzB,GAAJ,CAAQ,cAAR,EAAwBG,OAAxB,CAAP;AACD;;AACD,WAAO,IAAIH,GAAJ,CAAS,GAAE,KAAKE,OAAQ,OAAxB,EAAgCC,OAAhC,CAAP;AACD;;AACDG,EAAAA,UAAU,CAACoB,MAAD,EAAS;AACjB3B,IAAAA,aAAa,CAACiB,OAAd,CACE,UAASC,GAAT,EAAcU,CAAd,EAAiB;AACf,WAAKV,GAAL,IAAYS,MAAM,CAACE,YAAP,CAAoBD,CAAC,GAAG,CAAxB,CAAZ;AACD,KAFD,CAEEE,IAFF,CAEO,IAFP,CADF;AAKA,QAAIhB,MAAJ;AACA,QAAIiB,MAAM,GAAG,EAAb;;AACA,QAAI,KAAKvB,cAAL,GAAsBP,GAAG,CAAC+B,SAA9B,EAAyC;AACvC,YAAMC,KAAK,CACR,6BAA4B,KAAKzB,cAAe,gBAC/CP,GAAG,CAAC+B,SACL,IAHQ,CAAX;AAKD;;AACD,QAAIE,mBAAa,KAAKzB,UAAlB,CAAJ,EAAmC;AACjC,WAAKN,OAAL,GAAe+B,mBAAa,KAAKzB,UAAlB,EAA8BN,OAA7C;AACAW,MAAAA,MAAM,GAAGJ,eAAS,KAAKP,OAAd,EAAuBW,MAAvB,IAAiC,EAA1C;AACD,KAHD,MAGO;AACL,WAAKX,OAAL,GAAe,SAAf;AACA;AACD;;AACD,SAAK,MAAMe,GAAX,IAAkBH,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAlB,EAAuC;AACrC,UAAIiB,MAAM,IAAI,KAAKvB,cAAnB,EAAmC;AACjC;AACD;;AACD,WAAKU,GAAL,IAAYJ,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBe,IAAjB,CAAsBR,MAAtB,EAA8BI,MAA9B,CAAZ;AACAA,MAAAA,MAAM,IAAIjB,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBgB,IAAjB,CAAsB,KAAKlB,GAAL,CAAtB,CAAV;AACD;;AACD,WAAOa,MAAM,GAAG,CAAT,IAAc,KAAKvB,cAA1B,EAA0C;AACxC,YAAM6B,KAAK,GAAGV,MAAM,CAACW,YAAP,CAAoBP,MAApB,CAAd;AACA,YAAMQ,MAAM,GAAGZ,MAAM,CAACW,YAAP,CAAoBP,MAAM,GAAG,CAA7B,CAAf;AACAA,MAAAA,MAAM,IAAI,CAAV;AACA,YAAMS,GAAG,GAAGC,eAASJ,KAAT,CAAZ;;AACA,UAAI,CAACG,GAAL,EAAU;AACR,aAAKH,KAAL,IAAcV,MAAM,CAACe,KAAP,CAAaX,MAAb,EAAqBA,MAAM,GAAGQ,MAA9B,CAAd;AACAR,QAAAA,MAAM,IAAIQ,MAAV;AACA;AACD;;AACD,YAAMI,GAAG,GAAG,CAACjC,eAAS,KAAKP,OAAd,EAAuByC,MAAvB,IAAiC,EAAlC,EAAsCJ,GAAG,CAACG,GAA1C,KAAkDH,GAAG,CAACG,GAAlE;;AACA,UAAIH,GAAG,CAACK,QAAR,EAAkB;AAChB,YAAI,CAAC,KAAKF,GAAL,CAAL,EAAgB;AACd,eAAKA,GAAL,IAAY,EAAZ;AACD;;AACD,aAAKA,GAAL,EAAUG,IAAV,CAAeN,GAAG,CAACpB,IAAJ,CAASe,IAAT,CAAcR,MAAd,EAAsBI,MAAtB,EAA8BQ,MAA9B,CAAf;AACD,OALD,MAKO;AACL,aAAKI,GAAL,IAAYH,GAAG,CAACpB,IAAJ,CAASe,IAAT,CAAcR,MAAd,EAAsBI,MAAtB,EAA8BQ,MAA9B,CAAZ;AACD;;AACDR,MAAAA,MAAM,IAAIQ,MAAV;AACD;;AACD,SAAKQ,OAAL,CAAa,QAAb;AACD;;AACDA,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,UAAMlC,MAAM,GAAGJ,eAAS,KAAKP,OAAd,EAAuBW,MAAvB,IAAiC,EAAhD;;AACA,SAAK,MAAMI,GAAX,IAAkBH,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAlB,EAAqC;AACnC,UAAIF,MAAM,CAACI,GAAD,CAAN,IAAeJ,MAAM,CAACI,GAAD,CAAN,CAAY+B,MAA/B,EAAuC;AACrC,aAAK/B,GAAL,IAAYJ,MAAM,CAACI,GAAD,CAAN,CAAY+B,MAAZ,CAAmBD,IAAnB,EAAyBE,IAAzB,CAA8B,IAA9B,EAAoC,KAAKhC,GAAL,CAApC,CAAZ;AACD,OAFD,MAEO,IAAIG,WAAKH,GAAL,KAAaG,WAAKH,GAAL,EAAU+B,MAA3B,EAAmC;AACxC,YAAI5B,WAAKH,GAAL,EAAU2B,QAAd,EAAwB;AACtB,eAAK3B,GAAL,EAAUD,OAAV,CACE,UAASkC,KAAT,EAAgBvB,CAAhB,EAAmB;AACjB,iBAAKV,GAAL,EAAUU,CAAV,IAAeP,WAAKH,GAAL,EAAU+B,MAAV,CAAiBD,IAAjB,EAAuBE,IAAvB,CAA4B,IAA5B,EAAkCC,KAAlC,CAAf;AACD,WAFD,CAEErB,IAFF,CAEO,IAFP,CADF;AAKD,SAND,MAMO;AACL,eAAKZ,GAAL,IAAYG,WAAKH,GAAL,EAAU+B,MAAV,CAAiBD,IAAjB,EAAuBE,IAAvB,CAA4B,IAA5B,EAAkC,KAAKhC,GAAL,CAAlC,CAAZ;AACD;AACF;AACF;AACF;;AACDkC,EAAAA,WAAW,GAAG;AACZ,UAAMzB,MAAM,GAAG,IAAItB,MAAJ,CAAW,KAAKG,cAAhB,CAAf;AACAR,IAAAA,aAAa,CAACiB,OAAd,CACE,UAASC,GAAT,EAAcU,CAAd,EAAiB;AACfD,MAAAA,MAAM,CAAC0B,aAAP,CAAqB,KAAKnC,GAAL,CAArB,EAAgCU,CAAC,GAAG,CAApC;AACD,KAFD,CAEEE,IAFF,CAEO,IAFP,CADF;AAKA,WAAOH,MAAP;AACD;;AACD2B,EAAAA,QAAQ,GAAG;AACT,SAAK9C,cAAL,GAAsB,EAAtB;;AACA,QAAI,KAAKI,cAAT,EAAyB;AACvB,aAAO,KAAKwC,WAAL,EAAP;AACD;;AACD,SAAKL,OAAL,CAAa,QAAb;;AACA,UAAMjC,MAAM,GAAGJ,eAAS,KAAKP,OAAd,EAAuBW,MAAvB,IAAiC,EAAhD;;AACA,SAAK,MAAMI,GAAX,IAAkBH,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAlB,EAAqC;AACnC,UAAIF,MAAM,CAACI,GAAD,CAAV,EAAiB;AACf,aAAKV,cAAL,IAAuBM,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBgB,IAAjB,CAAsB,KAAKlB,GAAL,CAAtB,CAAvB;AACD,OAFD,MAEO,IAAIG,WAAKH,GAAL,CAAJ,EAAe;AACpB,cAAMqC,MAAM,GAAGlC,WAAKH,GAAL,EAAU2B,QAAV,GAAqB,KAAK3B,GAAL,CAArB,GAAiC,CAAC,KAAKA,GAAL,CAAD,CAAhD;AACAqC,QAAAA,MAAM,CAACtC,OAAP,CACE,UAASkC,KAAT,EAAgB;AACd,eAAK3C,cAAL,IAAuBa,WAAKH,GAAL,EAAUE,IAAV,CAAegB,IAAf,CAAoBe,KAApB,IAA6B,CAApD;AACD,SAFD,CAEErB,IAFF,CAEO,IAFP,CADF;AAKD;AACF;;AACD,UAAMH,MAAM,GAAG,KAAKyB,WAAL,EAAf;;AACA,QAAIrB,MAAM,GAAG,EAAb;;AACA,SAAK,MAAMb,GAAX,IAAkBH,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAlB,EAAuC;AACrCA,MAAAA,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBoC,KAAjB,CAAuB,KAAKtC,GAAL,CAAvB,EAAkCS,MAAlC,EAA0CI,MAA1C;AACAA,MAAAA,MAAM,IAAIjB,MAAM,CAACI,GAAD,CAAN,CAAYE,IAAZ,CAAiBgB,IAAjB,CAAsB,KAAKlB,GAAL,CAAtB,CAAV;AACD;;AACD,SAAK,MAAMA,GAAX,IAAkBH,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAlB,EAAqC;AACnC,UAAIK,WAAKH,GAAL,CAAJ,EAAe;AACb,cAAMqC,MAAM,GAAGlC,WAAKH,GAAL,EAAU2B,QAAV,GAAqB,KAAK3B,GAAL,CAArB,GAAiC,CAAC,KAAKA,GAAL,CAAD,CAAhD;AAEAqC,QAAAA,MAAM,CAACtC,OAAP,CAAe,UAASkC,KAAT,EAAgB;AAC7BxB,UAAAA,MAAM,CAAC8B,aAAP,CAAqBpC,WAAKH,GAAL,EAAUP,EAA/B,EAAmCoB,MAAnC;;AACA,gBAAMQ,MAAM,GAAGlB,WAAKH,GAAL,EAAUE,IAAV,CAAegB,IAAf,CAAoBe,KAApB,CAAf;;AACAxB,UAAAA,MAAM,CAAC8B,aAAP,CAAqBlB,MAArB,EAA6BR,MAAM,GAAG,CAAtC;AACAA,UAAAA,MAAM,IAAI,CAAV;;AACAV,qBAAKH,GAAL,EAAUE,IAAV,CAAeoC,KAAf,CAAqBL,KAArB,EAA4BxB,MAA5B,EAAoCI,MAApC;;AACAA,UAAAA,MAAM,IAAIQ,MAAV;AACD,SAPD;AAQD;AACF;;AACD,WAAOZ,MAAP;AACD;;AACD,SAAO+B,UAAP,CAAkBC,MAAlB,EAA0B;AACxB,QAAIhC,MAAM,GAAGgC,MAAM,CAACxB,IAAP,CAAY,CAAZ,CAAb;;AACA,QAAI,CAACR,MAAL,EAAa;AACX,aAAO,KAAP;AACD;;AACD,UAAMiC,aAAa,GAAGjC,MAAM,CAACE,YAAP,CAAoB,CAApB,CAAtB;;AACA,QAAI+B,aAAa,GAAG3D,GAAG,CAAC+B,SAAxB,EAAmC;AACjC,YAAMC,KAAK,CACR,6BAA4B2B,aAAc,gBACzC3D,GAAG,CAAC+B,SACL,IAHQ,CAAX;AAKD;;AACD2B,IAAAA,MAAM,CAACE,OAAP,CAAelC,MAAf;AACAA,IAAAA,MAAM,GAAGgC,MAAM,CAACxB,IAAP,CAAYyB,aAAZ,CAAT;;AACA,QAAI,CAACjC,MAAL,EAAa;AACX,aAAO,KAAP;AACD;;AACD,WAAO,IAAI1B,GAAJ,CAAQ0B,MAAR,CAAP;AACD;;AACD,SAAOpB,UAAP,CAAkBoB,MAAlB,EAA0B;AACxB,QAAIA,MAAM,CAACY,MAAP,GAAgB,EAAhB,IAAsBZ,MAAM,CAACY,MAAP,GAAgBZ,MAAM,CAACE,YAAP,CAAoB,CAApB,CAA1C,EAAkE;AAChE,aAAO,KAAP;AACD;;AACD,WAAO,IAAI5B,GAAJ,CAAQ0B,MAAR,CAAP;AACD;;AA7LO;;;AAgMV1B,GAAG,CAAC+B,SAAJ,GAAgB,KAAhB","sourcesContent":["/* eslint-disable no-param-reassign,camelcase,prefer-arrow-callback,space-before-function-paren*/\nimport { commands, commandsById, tlvs, tlvsById, errors } from './defs';\n\nconst pduHeadParams = [\n  'command_length',\n  'command_id',\n  'command_status',\n  'sequence_number',\n];\n\nclass PDU {\n  constructor(command, options = {}) {\n    if (Buffer.isBuffer(command)) {\n      return this.fromBuffer(command);\n    }\n    this.command = command;\n    this.command_length = 0;\n    this.command_id = commands[command].id;\n    this.command_status = options.command_status || 0;\n    this.sequence_number = options.sequence_number || 0;\n    if (this.command_status) {\n      return;\n    }\n    const params = commands[command].params || {};\n    Object.keys(params).forEach((key) => {\n      if (key in options) {\n        this[key] = options[key];\n      } else if ('default' in params[key]) {\n        this[key] = params[key].default;\n      } else {\n        this[key] = params[key].type.default;\n      }\n    });\n\n    Object.keys(options).forEach((key) => {\n      if (key in tlvs) {\n        this[key] = options[key];\n      }\n    });\n  }\n  isResponse() {\n    return !!(this.command_id & 0x80000000);\n  }\n  response(option) {\n    const options = option || {};\n    options.sequence_number = this.sequence_number;\n    if (this.command === 'unknown') {\n      if (!('command_status' in options)) {\n        options.command_status = errors.ESME_RINVCMDID;\n      }\n      return new PDU('generic_nack', options);\n    }\n    return new PDU(`${this.command}_resp`, options);\n  }\n  fromBuffer(buffer) {\n    pduHeadParams.forEach(\n      function(key, i) {\n        this[key] = buffer.readUInt32BE(i * 4);\n      }.bind(this),\n    );\n    let params;\n    let offset = 16;\n    if (this.command_length > PDU.maxLength) {\n      throw Error(\n        `PDU length was too large (${this.command_length}, maximum is ${\n          PDU.maxLength\n        }).`,\n      );\n    }\n    if (commandsById[this.command_id]) {\n      this.command = commandsById[this.command_id].command;\n      params = commands[this.command].params || {};\n    } else {\n      this.command = 'unknown';\n      return;\n    }\n    for (const key of Object.keys(params)) {\n      if (offset >= this.command_length) {\n        break;\n      }\n      this[key] = params[key].type.read(buffer, offset);\n      offset += params[key].type.size(this[key]);\n    }\n    while (offset + 4 <= this.command_length) {\n      const tlvId = buffer.readUInt16BE(offset);\n      const length = buffer.readUInt16BE(offset + 2);\n      offset += 4;\n      const tlv = tlvsById[tlvId];\n      if (!tlv) {\n        this[tlvId] = buffer.slice(offset, offset + length);\n        offset += length;\n        continue; // eslint-disable-line\n      }\n      const tag = (commands[this.command].tlvMap || {})[tlv.tag] || tlv.tag;\n      if (tlv.multiple) {\n        if (!this[tag]) {\n          this[tag] = [];\n        }\n        this[tag].push(tlv.type.read(buffer, offset, length));\n      } else {\n        this[tag] = tlv.type.read(buffer, offset, length);\n      }\n      offset += length;\n    }\n    this._filter('decode');\n  }\n  _filter(func) {\n    const params = commands[this.command].params || {};\n    for (const key of Object.keys(this)) {\n      if (params[key] && params[key].filter) {\n        this[key] = params[key].filter[func].call(this, this[key]);\n      } else if (tlvs[key] && tlvs[key].filter) {\n        if (tlvs[key].multiple) {\n          this[key].forEach(\n            function(value, i) {\n              this[key][i] = tlvs[key].filter[func].call(this, value);\n            }.bind(this),\n          );\n        } else {\n          this[key] = tlvs[key].filter[func].call(this, this[key]);\n        }\n      }\n    }\n  }\n  _initBuffer() {\n    const buffer = new Buffer(this.command_length);\n    pduHeadParams.forEach(\n      function(key, i) {\n        buffer.writeUInt32BE(this[key], i * 4);\n      }.bind(this),\n    );\n    return buffer;\n  }\n  toBuffer() {\n    this.command_length = 16;\n    if (this.command_status) {\n      return this._initBuffer();\n    }\n    this._filter('encode');\n    const params = commands[this.command].params || {};\n    for (const key of Object.keys(this)) {\n      if (params[key]) {\n        this.command_length += params[key].type.size(this[key]);\n      } else if (tlvs[key]) {\n        const values = tlvs[key].multiple ? this[key] : [this[key]];\n        values.forEach(\n          function(value) {\n            this.command_length += tlvs[key].type.size(value) + 4;\n          }.bind(this),\n        );\n      }\n    }\n    const buffer = this._initBuffer();\n    let offset = 16;\n    for (const key of Object.keys(params)) {\n      params[key].type.write(this[key], buffer, offset);\n      offset += params[key].type.size(this[key]);\n    }\n    for (const key of Object.keys(this)) {\n      if (tlvs[key]) {\n        const values = tlvs[key].multiple ? this[key] : [this[key]];\n\n        values.forEach(function(value) {\n          buffer.writeUInt16BE(tlvs[key].id, offset);\n          const length = tlvs[key].type.size(value);\n          buffer.writeUInt16BE(length, offset + 2);\n          offset += 4;\n          tlvs[key].type.write(value, buffer, offset);\n          offset += length;\n        });\n      }\n    }\n    return buffer;\n  }\n  static fromStream(stream) {\n    let buffer = stream.read(4);\n    if (!buffer) {\n      return false;\n    }\n    const commandLength = buffer.readUInt32BE(0);\n    if (commandLength > PDU.maxLength) {\n      throw Error(\n        `PDU length was too large (${commandLength}, maximum is ${\n          PDU.maxLength\n        }).`,\n      );\n    }\n    stream.unshift(buffer);\n    buffer = stream.read(commandLength);\n    if (!buffer) {\n      return false;\n    }\n    return new PDU(buffer);\n  }\n  static fromBuffer(buffer) {\n    if (buffer.length < 16 || buffer.length < buffer.readUInt32BE(0)) {\n      return false;\n    }\n    return new PDU(buffer);\n  }\n}\n\nPDU.maxLength = 16384;\n\nexport { PDU };\n"],"file":"pdu.js"}