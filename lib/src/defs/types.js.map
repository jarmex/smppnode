{"version":3,"sources":["../../../src/defs/types.js"],"names":["types","int8","read","buffer","offset","readUInt8","write","value","writeUInt8","size","default","int16","readUInt16BE","writeUInt16BE","int32","readUInt32BE","writeUInt32BE","string","length","toString","Buffer","copy","cstring","slice","dest_address_array","dest_address","dest_flag","result","number_of_dests","dest_addr_ton","dest_addr_npi","destination_addr","dl_name","push","forEach","unsuccess_sme_array","unsuccess_sme","no_unsuccess","error_status_code","tlv"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign,camelcase*/\n\nconst types = {\n  int8: {\n    read: (buffer, offset) => buffer.readUInt8(offset),\n    write: (value, buffer, offset) => {\n      buffer.writeUInt8(value || 0, offset);\n    },\n    size: () => 1,\n    default: 0,\n  },\n  int16: {\n    read: (buffer, offset) => buffer.readUInt16BE(offset),\n    write: (value, buffer, offset) => {\n      buffer.writeUInt16BE(value || 0, offset);\n    },\n    size: () => 2,\n    default: 0,\n  },\n  int32: {\n    read: (buffer, offset) => buffer.readUInt32BE(offset),\n    write: (value, buffer, offset) => {\n      buffer.writeUInt32BE(value || 0, offset);\n    },\n    size: () => 4,\n    default: 0,\n  },\n  string: {\n    read: (buffer, offset) => {\n      const length = buffer.readUInt8(offset++);\n      return buffer.toString('ascii', offset, offset + length);\n    },\n    write: (value, buffer, offset) => {\n      buffer.writeUInt8(value.length, offset++);\n      if (typeof value === 'string') {\n        value = new Buffer(value, 'ascii');\n      }\n      value.copy(buffer, offset);\n    },\n    size: (value) => value.length + 1,\n    default: '',\n  },\n  cstring: {\n    read: (buffer, offset) => {\n      let length = 0;\n      while (buffer[offset + length]) {\n        length++;\n      }\n      return buffer.toString('ascii', offset, offset + length);\n    },\n    write: (value, buffer, offset) => {\n      if (typeof value === 'string') {\n        value = new Buffer(value, 'ascii');\n      }\n      value.copy(buffer, offset);\n      buffer[offset + value.length] = 0;\n    },\n    size: (value) => value.length + 1,\n    default: '',\n  },\n  buffer: {\n    read: (buffer, offset) => {\n      const length = buffer.readUInt8(offset++);\n      return buffer.slice(offset, offset + length);\n    },\n    write: (value, buffer, offset) => {\n      buffer.writeUInt8(value.length, offset++);\n      if (typeof value === 'string') {\n        value = new Buffer(value, 'ascii');\n      }\n      value.copy(buffer, offset);\n    },\n    size: (value) => value.length + 1,\n    default: new Buffer(0),\n  },\n  dest_address_array: {\n    read: (buffer, offset) => {\n      let dest_address;\n      let dest_flag;\n      const result = [];\n      let number_of_dests = buffer.readUInt8(offset++);\n      while (number_of_dests-- > 0) {\n        dest_flag = buffer.readUInt8(offset++);\n        if (dest_flag === 1) {\n          dest_address = {\n            dest_addr_ton: buffer.readUInt8(offset++),\n            dest_addr_npi: buffer.readUInt8(offset++),\n            destination_addr: types.cstring.read(buffer, offset),\n          };\n          offset += types.cstring.size(dest_address.destination_addr);\n        } else {\n          dest_address = {\n            dl_name: types.cstring.read(buffer, offset),\n          };\n          offset += types.cstring.size(dest_address.dl_name);\n        }\n        result.push(dest_address);\n      }\n      return result;\n    },\n    write: (value, buffer, offset) => {\n      buffer.writeUInt8(value.length, offset++);\n      value.forEach((dest_address) => {\n        if ('dl_name' in dest_address) {\n          buffer.writeUInt8(2, offset++);\n          types.cstring.write(dest_address.dl_name, buffer, offset);\n          offset += types.cstring.size(dest_address.dl_name);\n        } else {\n          buffer.writeUInt8(1, offset++);\n          buffer.writeUInt8(dest_address.dest_addr_ton || 0, offset++);\n          buffer.writeUInt8(dest_address.dest_addr_npi || 0, offset++);\n          types.cstring.write(dest_address.destination_addr, buffer, offset);\n          offset += types.cstring.size(dest_address.destination_addr);\n        }\n      });\n    },\n    size: (value) => {\n      let size = 1;\n      value.forEach((dest_address) => {\n        if ('dl_name' in dest_address) {\n          size += types.cstring.size(dest_address.dl_name) + 1;\n        } else {\n          size += types.cstring.size(dest_address.destination_addr) + 3;\n        }\n      });\n      return size;\n    },\n    default: [],\n  },\n  unsuccess_sme_array: {\n    read: (buffer, offset) => {\n      let unsuccess_sme;\n      const result = [];\n      let no_unsuccess = buffer.readUInt8(offset++);\n      while (no_unsuccess-- > 0) {\n        unsuccess_sme = {\n          dest_addr_ton: buffer.readUInt8(offset++),\n          dest_addr_npi: buffer.readUInt8(offset++),\n          destination_addr: types.cstring.read(buffer, offset),\n        };\n        offset += types.cstring.size(unsuccess_sme.destination_addr);\n        unsuccess_sme.error_status_code = buffer.readUInt32BE(offset);\n        offset += 4;\n        result.push(unsuccess_sme);\n      }\n      return result;\n    },\n    write: (value, buffer, offset) => {\n      buffer.writeUInt8(value.length, offset++);\n      value.forEach((unsuccess_sme) => {\n        buffer.writeUInt8(unsuccess_sme.dest_addr_ton || 0, offset++);\n        buffer.writeUInt8(unsuccess_sme.dest_addr_npi || 0, offset++);\n        types.cstring.write(unsuccess_sme.destination_addr, buffer, offset);\n        offset += types.cstring.size(unsuccess_sme.destination_addr);\n        buffer.writeUInt32BE(unsuccess_sme.error_status_code, offset);\n        offset += 4;\n      });\n    },\n    size: (value) => {\n      let size = 1;\n      value.forEach((unsuccess_sme) => {\n        size += types.cstring.size(unsuccess_sme.destination_addr) + 6;\n      });\n      return size;\n    },\n    default: [],\n  },\n};\n\ntypes.tlv = {\n  int8: types.int8,\n  int16: types.int16,\n  int32: types.int32,\n  cstring: types.cstring,\n  string: {\n    read: (buffer, offset, length) =>\n      buffer.toString('ascii', offset, offset + length),\n    write: (value, buffer, offset) => {\n      if (typeof value === 'string') {\n        value = new Buffer(value, 'ascii');\n      }\n      value.copy(buffer, offset);\n    },\n    size: (value) => value.length,\n    default: '',\n  },\n  buffer: {\n    read: (buffer, offset, length) => buffer.slice(offset, offset + length),\n    write: (value, buffer, offset) => {\n      if (typeof value === 'string') {\n        value = new Buffer(value, 'ascii');\n      }\n      value.copy(buffer, offset);\n    },\n    size: (value) => value.length,\n    default: null,\n  },\n};\n\nexport { types };\n"],"file":"types.js"}